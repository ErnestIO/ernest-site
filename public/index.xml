<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ernest.io</title>
    <link>/</link>
    <description>Recent content on ernest.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>jason.reid@r3labs.io (Jason Reid)</managingEditor>
    <webMaster>jason.reid@r3labs.io (Jason Reid)</webMaster>
    <copyright>(c) 2016 R3 Labs</copyright>
    <lastBuildDate>Mon, 24 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Developer documentation - API Gateway</title>
      <link>/developer/api-gateway/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/api-gateway/</guid>
      <description>

&lt;h1 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h1&gt;

&lt;p&gt;The api-gateway is basically exposing a public REST api, locked with JWT authentication, so every authenticated user can interact with its endpoints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Architecture overview</title>
      <link>/developer/architecture-overview/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/architecture-overview/</guid>
      <description>

&lt;h1 id=&#34;architecture-overview&#34;&gt;Architecture overview&lt;/h1&gt;

&lt;p&gt;Ernest is based on a microservice oriented architecture. The majority of the services are built using Go, however we still need to maintain some jruby based in order to interact with VCloud.&lt;/p&gt;

&lt;h2 id=&#34;service-structure&#34;&gt;Service Structure&lt;/h2&gt;

&lt;p&gt;These microservices can be categorized into different families:&lt;/p&gt;

&lt;h3 id=&#34;public&#34;&gt;Public&lt;/h3&gt;

&lt;p&gt;This family holds every service with a public or private interface intended to be used by the end user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/api-gateway/&#34; target=&#34;_blank&#34;&gt;Api Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/developer/monit/&#34; target=&#34;_blank&#34;&gt;Monit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/developer/logger/&#34; target=&#34;_blank&#34;&gt;Logger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-stores&#34;&gt;Data Stores&lt;/h3&gt;

&lt;p&gt;They&amp;rsquo;re a crud over nats interface to interact with persistent data&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/stores/&#34; target=&#34;_blank&#34;&gt;Data stores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;definition-mappers&#34;&gt;Definition Mappers&lt;/h3&gt;

&lt;p&gt;Map the input yaml on a valid internal definition&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/mappers/&#34; target=&#34;_blank&#34;&gt;Definition mappers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;workflow-manager&#34;&gt;Workflow manager&lt;/h3&gt;

&lt;p&gt;It takes care of processing the necessary steps to build a service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/workflow-manager/&#34; target=&#34;_blank&#34;&gt;Workflow manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;builders&#34;&gt;Builders&lt;/h3&gt;

&lt;p&gt;Builders are processing lists of components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/builders/&#34; target=&#34;_blank&#34;&gt;Builders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;adapters&#34;&gt;Adapters&lt;/h3&gt;

&lt;p&gt;Adapters are processing a single component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/adapters/&#34; target=&#34;_blank&#34;&gt;Adapters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;connectors&#34;&gt;Connectors&lt;/h3&gt;

&lt;p&gt;They&amp;rsquo;re connecting ernest with third party providers in order to process a component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/developer/connectors/&#34; target=&#34;_blank&#34;&gt;Connectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally we use to group these families on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend (Public + Stores)&lt;/li&gt;
&lt;li&gt;Backend (Mappers + Core + Builders + Adapters + Connectors)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - BDD tests</title>
      <link>/developer/bdd/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/bdd/</guid>
      <description>

&lt;h1 id=&#34;bdd-tests&#34;&gt;BDD tests&lt;/h1&gt;

&lt;p&gt;In order to test, and keep a live documentation of ernest-cli, we have implemented some end to end tests using gucumber and gherkin.&lt;/p&gt;

&lt;p&gt;You can find the features definitions describing ernest behaviour &lt;a href=&#34;https://github.com/ernestio/ernest-cli/tree/develop/internal/features/cli&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Component adapters</title>
      <link>/developer/adapters/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/adapters/</guid>
      <description>

&lt;h3 id=&#34;adapters&#34;&gt;Adapters&lt;/h3&gt;

&lt;p&gt;An adapter is getting an order for a single component creation and it decides which connector will process this creation.&lt;/p&gt;

&lt;p&gt;Some of them use a translator so the internal component structure gets adapted to the connector, however, same as we are doing with builders, we&amp;rsquo;re trying to deliver as much adapters as possible on top of the generic-adapter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Component builders</title>
      <link>/developer/builders/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/builders/</guid>
      <description>

&lt;h1 id=&#34;component-builders&#34;&gt;Component builders&lt;/h1&gt;

&lt;p&gt;A builder is basically a component scheduler. It receives a list of components and processes each component sequentially or in parallel.&lt;/p&gt;

&lt;h2 id=&#34;sequential-processing&#34;&gt;Sequential processing&lt;/h2&gt;

&lt;p&gt;In order to process the component sequentially you should set the field &amp;laquo;sequential_processing&amp;raquo; to true .&lt;/p&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;In order to track the state of all components in a collection, state is stored on redis. When all components have completed, a return event is sent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Data stores</title>
      <link>/developer/stores/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/stores/</guid>
      <description>

&lt;h1 id=&#34;data-stores&#34;&gt;Data stores&lt;/h1&gt;

&lt;p&gt;Microservices on this family are an inteface to interact with persistent data. So you can query stored data through nats with messages like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;entity.get&lt;/li&gt;
&lt;li&gt;entity.find&lt;/li&gt;
&lt;li&gt;entity.del&lt;/li&gt;
&lt;li&gt;entity.set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically you&amp;rsquo;ll find a microservice per each entity on the system, which actually are:&lt;/p&gt;

&lt;h4 id=&#34;datacenter-store&#34;&gt;datacenter-store&lt;/h4&gt;

&lt;p&gt;Implements a nats interface to operate with datacenter stored data&lt;/p&gt;

&lt;h4 id=&#34;user-store&#34;&gt;user-store&lt;/h4&gt;

&lt;p&gt;Will open a nats interface to operate with user stored data. Additionally will manage all user sensible data encryption.&lt;/p&gt;

&lt;h4 id=&#34;service-store&#34;&gt;service-store&lt;/h4&gt;

&lt;p&gt;Implements a nats interface to operate with service stored data&lt;/p&gt;

&lt;h4 id=&#34;config-store&#34;&gt;config-store&lt;/h4&gt;

&lt;p&gt;Implements a nats interface to operate with system configuration, this configuration is based on a configuration file deployed on ernest creation.&lt;/p&gt;

&lt;h4 id=&#34;group-store&#34;&gt;group-store&lt;/h4&gt;

&lt;p&gt;Implements a nats interface to operate with groups stored data. System authorization levels are based on this groups&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Definition mappers</title>
      <link>/developer/mappers/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/mappers/</guid>
      <description>

&lt;h1 id=&#34;definition-mappers&#34;&gt;Definition mappers&lt;/h1&gt;

&lt;p&gt;Definition mappers basically map your input yaml/json file on a valid internal struct at the time they do an initial validation.&lt;/p&gt;

&lt;h4 id=&#34;definition-mapper&#34;&gt;definition-mapper&lt;/h4&gt;

&lt;p&gt;Definition mapper service basically decides which provider specific mapper will handle the input mapping.&lt;/p&gt;

&lt;h4 id=&#34;vcloud-definition-mapper&#34;&gt;vcloud-definition-mapper&lt;/h4&gt;

&lt;p&gt;Validates and maps the VCloud yaml input on a valid internal service.&lt;/p&gt;

&lt;h4 id=&#34;aws-definition-mapper&#34;&gt;aws-definition-mapper&lt;/h4&gt;

&lt;p&gt;Validates and maps the AWS yaml input on a valid internal service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Integration tests</title>
      <link>/developer/integration-testing/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/integration-testing/</guid>
      <description>

&lt;h1 id=&#34;integration-tests&#34;&gt;Integration tests&lt;/h1&gt;

&lt;p&gt;As ernest is a distributed system, it&amp;rsquo;s sometimes hard to have integration tests. This is why some key services have integration tests + per service tests.&lt;/p&gt;

&lt;p&gt;These integration tests are building a partial ernest environment with docker-compose, but they&amp;rsquo;re mocking all connectors with &lt;a href=&#34;https://github.com/ernestio/all-all-fake-connector&#34; target=&#34;_blank&#34;&gt;all-all-fake-connector&lt;/a&gt; which basically responds what&amp;rsquo;s suposed by the connectors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Logger</title>
      <link>/developer/logger/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/logger/</guid>
      <description>

&lt;h1 id=&#34;logger&#34;&gt;Logger&lt;/h1&gt;

&lt;p&gt;Logger is listening at all events on the message bus and ofuscating sensible data and sending it to a third party logger system.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Monit</title>
      <link>/developer/monit/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/monit/</guid>
      <description>

&lt;h1 id=&#34;monit&#34;&gt;Monit&lt;/h1&gt;

&lt;p&gt;This service is sending real time information about service creation to the end user by keeping a stream open with the client.&lt;/p&gt;

&lt;p&gt;It is catching all internal messages and decides which ones will fire a new message through the stream&lt;/p&gt;

&lt;p&gt;It exposes data streams through SSE(Server Side Events).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Naming conventions</title>
      <link>/developer/naming-conventions/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/naming-conventions/</guid>
      <description>

&lt;h1 id=&#34;naming-conventions&#34;&gt;Naming conventions&lt;/h1&gt;

&lt;p&gt;In order to keep it clean there are some naming conventions you need to follow in order to understand ernest&lt;/p&gt;

&lt;h2 id=&#34;service-naming&#34;&gt;Service Naming&lt;/h2&gt;

&lt;p&gt;Every service family follows an easy to understand naming convention.&lt;/p&gt;

&lt;h3 id=&#34;mappers&#34;&gt;Mappers&lt;/h3&gt;

&lt;p&gt;Mappers will be named following the structure &lt;em&gt;&lt;provider&gt;-definition-mapper&lt;/em&gt;. &amp;lsquo;provider&amp;rsquo; is the cloud service it will be mapping, i.e. AWS, VCloud &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;adapters&#34;&gt;Adapters&lt;/h3&gt;

&lt;p&gt;We base the adapters naming on the component they&amp;rsquo;re representing &lt;em&gt;&lt;component&gt;-adapter&lt;/em&gt;. A component can be an instance, a network, an s3 bucket&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;connectors&#34;&gt;Connectors&lt;/h3&gt;

&lt;p&gt;A connector name will look like &lt;em&gt;&lt;component&gt;-&lt;action&gt;-&lt;provider&gt;-component&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is basically composed by some variable parts:
- component : the component it represents: instances, networks, routers&amp;hellip;
- action : the action will implement: create, delete, update. Additionally you will find the action &amp;laquo;all&amp;raquo;, which will represent is implementing all possible actions.
- provider : the provider is connecting to. AWS, VCloud&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;messages-naming&#34;&gt;Messages naming&lt;/h2&gt;

&lt;p&gt;All services on ernest are communicating through nats messages. There is a naming convention for any message on the platform, and you can find it in diferent forms:&lt;/p&gt;

&lt;h4 id=&#34;component-s-action&#34;&gt;&amp;lt;component&amp;gt;s.&amp;lt;action&amp;gt;&lt;/h4&gt;

&lt;p&gt;These messages are representing the communication between the workflow manager and the builders, and basically they&amp;rsquo;re managing a list of components to be processed.&lt;/p&gt;

&lt;h4 id=&#34;component-action&#34;&gt;&amp;lt;component&amp;gt;.&amp;lt;action&amp;gt;&lt;/h4&gt;

&lt;p&gt;A single component to be processed; these messages are managed by builders and adapters.&lt;/p&gt;

&lt;h4 id=&#34;component-action-provider&#34;&gt;&amp;lt;component&amp;gt;.&amp;lt;action&amp;gt;.&amp;lt;provider&amp;gt;&lt;/h4&gt;

&lt;p&gt;They are sending the necessary info from the adapter to be processed by a specific connnector.&lt;/p&gt;

&lt;p&gt;All these messages are replied with an appended &amp;laquo;.done&amp;raquo; or &amp;laquo;.error&amp;raquo; word to the subject, so the sender will know if the action was a success or a failure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Per service tests</title>
      <link>/developer/unit-testiing/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/unit-testiing/</guid>
      <description>

&lt;h1 id=&#34;per-service-tests&#34;&gt;Per service tests&lt;/h1&gt;

&lt;p&gt;Each service has its own test suite based uniquely on how the specific service behaves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Provider connectors</title>
      <link>/developer/connectors/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/connectors/</guid>
      <description>

&lt;h3 id=&#34;connectors&#34;&gt;Connectors&lt;/h3&gt;

&lt;p&gt;A connector is a service which is directly interacting with the provider in order to process (get, create, update or delete) the component on the provider.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developer documentation - Workflow manager</title>
      <link>/developer/workflow-manager/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/developer/workflow-manager/</guid>
      <description>

&lt;h1 id=&#34;workflow-manager&#34;&gt;Workflow manager&lt;/h1&gt;

&lt;p&gt;Workflow manager is a service to process grouped lists of components. It actually works on top of nats.io. Workflow manager provides serveral key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adaptable workflow definition&lt;/strong&gt; : Workflow definition is received as part of the entry point, so it is externally defined.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Templating&lt;/strong&gt; : You can use the templating system to fill some component details with other component properties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External persistence&lt;/strong&gt; : Workflow manager will call an external service to persist the current definition.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quick-start&#34;&gt;Quick start&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:ernestio/workflow-manager.git
make deps &amp;amp;&amp;amp; make install
workflow-manager
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;As workflow-manager does not provide any persistence system it directly depends on &lt;a href=&#34;https://github.com/ErnestIO/service-store&#34; target=&#34;_blank&#34;&gt;service-store&lt;/a&gt;, and its communcation is through nats.io.&lt;/p&gt;

&lt;h2 id=&#34;input-definition&#34;&gt;Input (definition)&lt;/h2&gt;

&lt;p&gt;The input definition is basically a json input with the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;test-generated-id&amp;quot;,
    &amp;quot;workflow&amp;quot;: {
			&amp;quot;arcs&amp;quot;: [{
				&amp;quot;from&amp;quot;: &amp;quot;created&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;started&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;service.create&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;started&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;creating_components&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;components.create&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;creating_components&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;components_created&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;components.create.done&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;components_created&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;updating_components&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;components.update&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;updating_components&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;components_updated&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;components.update.done&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;components_updated&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;deleting_components&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;components.delete&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;deleting_components&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;components_deleted&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;components.delete.done&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;components_deleted&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;done&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;service.create.done&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;pre-failed&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;failed&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;to_error&amp;quot;
			}, {
				&amp;quot;from&amp;quot;: &amp;quot;failed&amp;quot;,
				&amp;quot;to&amp;quot;: &amp;quot;errored&amp;quot;,
				&amp;quot;event&amp;quot;: &amp;quot;service.create.error&amp;quot;
			}]
    },
    &amp;quot;components&amp;quot;: {
      &amp;quot;status&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;started&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;finished&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;items&amp;quot;: [{
        &amp;quot;service&amp;quot;: &amp;quot;test&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;vcloud&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;existing&amp;quot;,
        &amp;quot;field&amp;quot;: &amp;quot;existing&amp;quot; 
      }]
    },
    &amp;quot;components_to_create&amp;quot;: {
      &amp;quot;status&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;started&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;finished&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;items&amp;quot;: [{
        &amp;quot;service&amp;quot;: &amp;quot;test&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;vcloud&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;added&amp;quot;,
        &amp;quot;field&amp;quot;: &amp;quot;created&amp;quot; 
      },{
        &amp;quot;service&amp;quot;: &amp;quot;test&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;vcloud&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;updated&amp;quot;,
        &amp;quot;field&amp;quot;: &amp;quot;created_to_be_updated&amp;quot; 
      }]
    },
    &amp;quot;components_to_update&amp;quot;: {
      &amp;quot;status&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;started&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;finished&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;items&amp;quot;: [{
        &amp;quot;service&amp;quot;: &amp;quot;test&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;vcloud&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;updated&amp;quot;,
        &amp;quot;field&amp;quot;: &amp;quot;updated&amp;quot; 
      }]
    },
    &amp;quot;components_to_delete&amp;quot;: {
      &amp;quot;status&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;started&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;finished&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;items&amp;quot;: [{
        &amp;quot;service&amp;quot;: &amp;quot;test&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;vcloud&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;existing&amp;quot;
      }]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change add / remove as many component batches as you want, they will need to be represented as part of the workflow too.&lt;/p&gt;

&lt;p&gt;In order to build workflows, you can have a look at &lt;a href=&#34;https://github.com/r3labs/workflow&#34; target=&#34;_blank&#34;&gt;workflow library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Workflow-manager will send a &lt;strong&gt;components.verb&lt;/strong&gt; for each transition you&amp;rsquo;ve defined on your workflow, and will wait for &lt;strong&gt;component.verb.status&lt;/strong&gt;, where status can be done or error.&lt;/p&gt;

&lt;p&gt;You will find a more up to date documentation on &lt;a href=&#34;https://github.com/ernestio/workflow-manager/blob/develop/README.md&#34; target=&#34;_blank&#34;&gt;the repo README&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Examples</title>
      <link>/documentation/aws-examples/</link>
      <pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate>
      <author>jason.reid@r3labs.io (Jason Reid)</author>
      <guid>/documentation/aws-examples/</guid>
      <description>

&lt;h1 id=&#34;amazon-web-services-examples&#34;&gt;Amazon Web Services Examples&lt;/h1&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Before we get started we will need the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS access key&lt;/li&gt;
&lt;li&gt;AWS secret key&lt;/li&gt;
&lt;li&gt;AWS VPC ID&lt;/li&gt;
&lt;li&gt;Ernest IP address&lt;/li&gt;
&lt;li&gt;Ernest username/password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is to set the IP address of Ernest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest target https://10.50.1.11
Target set

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we login to Ernest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest login
Username: user1
Password: ******
Welcome back user1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have logged in to Ernest we can setup the AWS datacenter and credentials that Ernest will use to create our infrastructure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest datacenter create aws --region eu-west-1 --secret_access_key XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX --access_key_id YYYYYYYYYYYYYYYYYYYY my-dc
Datacenter &#39;my-dc&#39; successfully created

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our datacenter created in Ernest we can start building stuff.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-service&#34;&gt;Creating a Service&lt;/h2&gt;

&lt;p&gt;We will create a simple environment with one Ubuntu server, a public IP assigned to it, and the ability to ssh to that server from our IP (52.211.19.211).&lt;/p&gt;

&lt;p&gt;Our environment is defined in the following YAML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
name: demo
datacenter: my-dc
vpc_id: vpc-abcdef01

networks:
  - name: public
    subnet: 10.0.10.0/24
    public: true

security_groups:
  - name: public-sg
    egress:
      - ip: 0.0.0.0/0
        protocol: any
        from_port: &#39;0&#39;
        to_port: &#39;65535&#39;
    ingress:
      - ip: 52.211.19.211/32
        protocol: tcp
        from_port: &#39;22&#39;
        to_port: &#39;22&#39;

instances:
  - name: public
    elastic_ip: true
    type: t2.micro
    image: ami-ed82e39e
    network: public
    start_ip: 10.0.10.11
    count: 1
    key_pair: my-key
    security_groups:
      - public-sg

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets apply our definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service apply demo.yml 
Environment creation requested
Ernest will show you all output from your requested service creation
You can cancel at any moment with Ctrl+C, even the service is still being created, you won&#39;t have any output
Starting environment creation

Creating networks:
 - my-dc-demo-public
   IP     : 10.0.10.0/24
   AWS ID : subnet-defabc01
   Status : completed
Networks successfully created

Creating firewalls:
 - my-dc-demo-public-sg
   Status    : completed
Firewalls created

Creating instances:
 - my-dc-demo-public-1
   IP        : 10.0.10.11
   AWS ID    : i-abcdef01abcdef011
   Status    : completed
Instances successfully created

Updating instances:
 - my-dc-demo-public-1
   IP        : 10.0.10.11
   PUBLIC IP : 52.210.179.96
   AWS ID    : i-abcdef01abcdef011
   Status    : completed
Instances successfully updated
SUCCESS: rules successfully applied
Your environment endpoint is: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can list the services we have built:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service list
NAME  UPDATED         STATUS  ENDPOINT
demo  2016-09-12 15:57:46.195942 +0000 UTC  done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see detailed provider-generated information related to our service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service info demo
Name : demo
VPC : vpc-abcdef01

ELBs (empty)

Networks:
+---------------------------+-----------------+
|           NAME            |       ID        |
+---------------------------+-----------------+
| my-dc-demo-public         | subnet-defabc01 |
+---------------------------+-----------------+

Instances:
+-----------------------------+---------------------+---------------+------------+
|            NAME             |         ID          |   PUBLIC IP   | PRIVATE IP |
+-----------------------------+---------------------+---------------+------------+
| my-dc-demo-public-1         | i-abcdef01abcdef011 | 52.210.179.96 | 10.0.10.11 |
+-----------------------------+---------------------+---------------+------------+

NAT gateways (empty)

Security groups:
+------------------------------+-------------+
|             NAME             |  GROUP ID   |
+------------------------------+-------------+
| my-dc-demo-public-sg         | sg-01234567 |
+------------------------------+-------------+

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can view the history of applies for our service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service history demo
NAME  BUILD ID                UPDATED         STATUS
demo  89389b76-cc25-4add-55e5-b7647217b4b1-abf663d6c173d4af98e3ff20bb7e8dde 2016-09-12 15:57:46.195942 +0000 UTC  done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For our service we can show the definition applied for a given Build ID:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service definition demo --build 89389b76-cc25-4add-55e5-b7647217b4b1-abf663d6c173d4af98e3ff20bb7e8dde
---
name: demo
datacenter: my-dc
vpc_id: vpc-abcdef01

networks:
  - name: public
    subnet: 10.0.10.0/24
    public: true

security_groups:
  - name: public-sg
    egress:
      - ip: 0.0.0.0/0
        protocol: any
        from_port: &#39;0&#39;
        to_port: &#39;65535&#39;
    ingress:
      - ip: 52.211.19.211/32
        protocol: tcp
        from_port: &#39;22&#39;
        to_port: &#39;22&#39;

instances:
  - name: public
    elastic_ip: true
    type: t2.micro
    image: ami-ed82e39e
    network: public
    start_ip: 10.0.10.11
    count: 1
    key_pair: my-key
    security_groups:
      - public-sg

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modifying-a-service&#34;&gt;Modifying a Service&lt;/h2&gt;

&lt;p&gt;Lets modify the service we create above. We will add a private network with a server on it and a NAT gateway attached to it.&lt;/p&gt;

&lt;p&gt;Our modified YAML file is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
name: demo
datacenter: my-dc
vpc_id: vpc-abcdef01

networks:
  - name: public
    subnet: 10.0.10.0/24
    public: true
  - name: private
    subnet: 10.0.11.0/24
    public: false
    nat_gateway: private-nat

nat_gateways:
  - name: private-nat
    public_network: public

security_groups:
  - name: public-sg
    egress:
      - ip: 0.0.0.0/0
        protocol: any
        from_port: &#39;0&#39;
        to_port: &#39;65535&#39;
    ingress:
      - ip: 52.211.19.211/32
        protocol: tcp
        from_port: &#39;22&#39;
        to_port: &#39;22&#39;
  - name: private-sg
    egress:
      - ip: 0.0.0.0/0
        protocol: any
        from_port: &#39;0&#39;
        to_port: &#39;65535&#39;
    ingress:
      - ip: 10.0.0.0/16
        protocol: tcp
        from_port: &#39;22&#39;
        to_port: &#39;22&#39;

instances:
  - name: public
    elastic_ip: true
    type: t2.micro
    image: ami-ed82e39e
    network: public
    start_ip: 10.0.10.11
    count: 1
    key_pair: my-key
    security_groups:
      - public-sg

  - name: private
    type: t2.micro
    image: ami-ed82e39e
    network: private
    start_ip: 10.0.11.11
    count: 1
    key_pair: my-key
    security_groups:
      - private-sg

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we apply this YAML we can see Ernest make the necessary changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service apply demo.yml 
Environment creation requested
Ernest will show you all output from your requested service creation
You can cancel at any moment with Ctrl+C, even the service is still being created, you won&#39;t have any output
Starting environment creation

Creating networks:
 - my-dc-demo-private
   IP     : 10.0.11.0/24
   AWS ID : subnet-defabc02
   Status : completed
Networks successfully created

Creating firewalls:
 - my-dc-demo-private-sg
   Status    : completed
Firewalls created

Creating instances:
 - my-dc-demo-private-1
   IP        : 10.0.11.11
   AWS ID    : i-abcdef01abcdef012
   Status    : completed
Instances successfully created

Updating instances:
 - my-dc-demo-private-1
   IP        : 10.0.11.11
   PUBLIC IP : 
   AWS ID    : i-abcdef01abcdef012
   Status    : completed
Instances successfully updated

Creating nats:
 - my-dc-demo-private-nat
   Status    : completed
Nats created
SUCCESS: rules successfully applied
Your environment endpoint is: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see our service in the list, with the most recent update time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service list
NAME  UPDATED         STATUS  ENDPOINT
demo  2016-09-12 16:03:40.195942 +0000 UTC  done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The service info has also updated with the new information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service info demo
Name : demo
VPC : vpc-abcdef01

ELBs (empty)

Networks:
+---------------------------+-----------------+
|           NAME            |       ID        |
+---------------------------+-----------------+
| my-dc-demo-public         | subnet-defabc01 |
| my-dc-demo-private        | subnet-defabc02 |
+---------------------------+-----------------+

Instances:
+-----------------------------+---------------------+---------------+------------+
|            NAME             |         ID          |   PUBLIC IP   | PRIVATE IP |
+-----------------------------+---------------------+---------------+------------+
| my-dc-demo-public-1         | i-abcdef01abcdef011 | 52.210.179.96 | 10.0.10.11 |
| my-dc-demo-private-1        | i-abcdef01abcdef012 |               | 10.0.11.11 |
+-----------------------------+---------------------+---------------+------------+

NAT gateways:
+-------------------------------+-----------------------+
|             NAME              |       GROUP ID        |
+-------------------------------+-----------------------+
| my-dc-demo-private-nat        | nat-abcdef01abcdef013 |
+-------------------------------+-----------------------+

Security groups:
+------------------------------+-------------+
|             NAME             |  GROUP ID   |
+------------------------------+-------------+
| my-dc-demo-public-sg         | sg-01234567 |
| my-dc-demo-private-sg        | sg-89012345 |
+------------------------------+-------------+

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The history shows both of the applies we have done for this service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service history demo
NAME  BUILD ID                UPDATED         STATUS
demo  72c1306c-c6ee-4d9b-4230-617d0e969ea9-abf663d6c173d4af98e3ff20bb7e8dde 2016-09-12 16:03:40.235144 +0000 UTC  done
demo  89389b76-cc25-4add-55e5-b7647217b4b1-abf663d6c173d4af98e3ff20bb7e8dde 2016-09-12 15:57:46.195942 +0000 UTC  done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The definition for the most recent build can be displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service definition demo --build 72c1306c-c6ee-4d9b-4230-617d0e969ea9-abf663d6c173d4af98e3ff20bb7e8dde
---
name: demo
datacenter: my-dc
vpc_id: vpc-abcdef01

networks:
  - name: public
    subnet: 10.0.10.0/24
    public: true
  - name: private
    subnet: 10.0.11.0/24
    public: false
    nat_gateway: private-nat

nat_gateways:
  - name: private-nat
    public_network: public

security_groups:
  - name: public-sg
    egress:
      - ip: 0.0.0.0/0
        protocol: any
        from_port: &#39;0&#39;
        to_port: &#39;65535&#39;
    ingress:
      - ip: 52.211.19.211/32
        protocol: tcp
        from_port: &#39;22&#39;
        to_port: &#39;22&#39;
  - name: private-sg
    egress:
      - ip: 0.0.0.0/0
        protocol: any
        from_port: &#39;0&#39;
        to_port: &#39;65535&#39;
    ingress:
      - ip: 10.0.0.0/16
        protocol: tcp
        from_port: &#39;22&#39;
        to_port: &#39;22&#39;

instances:
  - name: public
    elastic_ip: true
    type: t2.micro
    image: ami-ed82e39e
    network: public
    start_ip: 10.0.10.11
    count: 1
    key_pair: my-key
    security_groups:
      - public-sg

  - name: private
    type: t2.micro
    image: ami-ed82e39e
    network: private
    start_ip: 10.0.11.11
    count: 1
    key_pair: my-key
    security_groups:
      - private-sg

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;clean-up&#34;&gt;Clean-up&lt;/h2&gt;

&lt;p&gt;After we have finished with our service we can remove it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ernest service destroy demo
Are you sure? Please type yes or no and then press enter: yes

Deleting nats:
 - my-dc-demo-private-nat
   Status    : completed
Nats deleted

Deleting instances:
 - my-dc-demo-public-1
   IP        : 10.0.10.11
   PUBLIC IP : 52.210.179.96
   AWS ID    : i-abcdef01abcdef011
   Status    : completed
 - my-dc-demo-private-1
   IP        : 10.0.11.11
   PUBLIC IP : 
   AWS ID    : i-abcdef01abcdef012
   Status    : completed
Instances deleted

Deleting networks:
 - my-dc-demo-public
   IP     : 10.0.10.0/24
   AWS ID : subnet-defabc01
   Status : completed
 - my-dc-demo-private
   IP     : 10.0.11.0/24
   AWS ID : subnet-defabc02
   Status : completed
Networks deleted

Deleting firewalls:
 - my-dc-demo-public-sg
   Status    : completed
 - my-dc-demo-private-sg
   Status    : completed
Firewalls deleted
SUCCESS: your environment has been successfully deleted

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Take a look at the &lt;a href=&#34;/documentation/aws-yaml/&#34;&gt;AWS YAML reference&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>